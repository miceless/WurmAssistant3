<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.AutoRegistration</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions">
            <summary>
            Configuration options and extensibility point for configuring Auto-Registration of SimpleInjector.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions.AutoRegistrationEnabledProvider">
            <summary>
            Controls which types will be auto-registered.  By default, all types in the application root
            namespace will be registered unless otherwise specified.  When using the built-in provider, you may
            specify type or assembly names to exclude from auto-registration.  Custom providers can be specified 
            to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions.ImplementationProvider">
            <summary>
            Provides the services and concrete implementations to auto-register.  Custom providers
            can be specified to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions.LifestyleResolver">
            <summary>
            Resolves the lifestyle of types for auto-registration.  By default, all types will be transient unless 
            they have an ImmutableObjectAttribute that specifies that the type is immutable.  Custom resolvers can be specified
            to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions.DependencyRegistrationProviders">
            <summary>
            Providers for discovering and registering dependencies of each type.  This collection can be replaced or extended with
            custom providers.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions.RegisterDecorators">
            <summary>
            Gets or sets if decorators should be discovered and automatically registered.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider">
            <summary>
            Providers all registration logic for types that have auto-registration enabled.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider.#ctor(SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Constructor.  Creates a new TypeRegistrationProvider instance.
            </summary>
            <param name="container">SimpleInjector Container instance</param>
            <param name="options">Registration options to use to auto-register types.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider.RegisterTypes">
            <summary>
            Discovers and registers all enabled types.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider.RegisterType(System.Type,System.Type)">
            <summary>
            Registers the specified concrete implementation for the specified service.
            </summary>
            <param name="concreteType">Concrete implementation to register</param>
            <param name="serviceType">Service fulfilled by the concrete implementation.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider.IsOpenGeneric(System.Type)">
            <summary>
            Determines if the specified type is an open generic.
            </summary>
            <param name="type">Type to analyze.</param>
            <returns>A value indicating if the specified type is an open generic.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.TypeRegistration.TypeRegistrationProvider.IsDecoratorType(System.Type)">
            <summary>
            Determines if the specified type is a decorator of a service.
            </summary>
            <param name="type">Type to analyze.</param>
            <returns>A value indicating if the specified type is a decorator of a service.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.AutoRegistrationExtension">
            <summary>
            Static container for Auto-Registration extension methods
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationExtension.AutoRegister(SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Discovers and registers all types within the root namespace of the application.  To extend the behavior or specify 
            details, including the root namespace, please specify the options object.
            </summary>
            <param name="container">SimpleInjector container in which these types should be registered.</param>
            <param name="options">Optional: options to use while registering types.  This can also be used or override or
            extend the behavior of the auto-registration process.</param>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProvider">
            <summary>
            Provides logic to determine which types should be included or excluded
            from the auto-registration process.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationEnabledProvider">
            <summary>
            Provides logic to determine which types should be included or excluded
            from the auto-registration process.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationEnabledProvider.IsAutoRegistrationEnabled(System.Type)">
            <summary>
            Determines if the specified type is enabled for auto-registration.
            </summary>
            <param name="type">Type to determine if it should be auto-registered.</param>
            <returns>A value indicating if the specified type is enabled for
            auto-registration</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IAutoRegistrationEnabledProvider.IsAutoRegistrationEnabled(System.Reflection.Assembly)">
            <summary>
            Determines if the specified assembly is enabled for auto-registration.
            </summary>
            <param name="assembly">Assembly to determine if it should be auto-registered.</param>
            <returns>A value indicating if the specified assembly is enabled for
            auto-registration.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProvider.#ctor(SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProviderOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="options">Options used to detmine which types should be included or excluded
            for the auto-registration process.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProvider.IsAutoRegistrationEnabled(System.Type)">
            <summary>
            Determines if the specified type is enabled for auto-registration.
            </summary>
            <param name="type">Type to determine if it should be auto-registered.</param>
            <returns>A value indicating if the specified type is enabled for
            auto-registration</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProvider.IsAutoRegistrationEnabled(System.Reflection.Assembly)">
            <summary>
            Determines if the specified assembly is enabled for auto-registration.
            </summary>
            <param name="assembly">Assembly to determine if it should be auto-registered.</param>
            <returns>A value indicating if the specified assembly is enabled for
            auto-registration.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProviderOptions">
            <summary>
            Options used to determine which types should or should not be included in the
            auto-registration process.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProviderOptions.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="rootNamespace">The root namespace of the application.  By default, 
            only types within this root namespace will be auto-registered.</param>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProviderOptions.DisabledTypeNames">
            <summary>
            A collection of names of types or assemblies to exclude from the 
            auto-registration process
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationEnabledProvider.AttributeAutoRegistrationEnabledProviderOptions.RootNamespace">
            <summary>
            Gets or sets the root namespace.  By default, only types within this root namespace
            will be auto-registered.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.AutoRegistrationOptions">
            <summary>
            Configuration options and extensibility point for configuring Auto-Registration of SimpleInjector.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationOptions.#ctor(System.String)">
            <summary>
            Constructor.  Initializes the class with the default extensibility providers.
            </summary>
            <param name="rootNamespace">Root namespace of the application.  All auto-registration will be restricted to 
            types within this namespace.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.AutoRegistrationOptions.RegisterMefExtensions">
            <summary>
            Discovers and registers all Microsoft Extensibility Framework services registered in this
            assembly.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationOptions.AutoRegistrationEnabledProvider">
            <summary>
            Controls which types will be auto-registered.  By default, all types in the application root
            namespace will be registered unless otherwise specified.  When using the built-in provider, you may
            specify type or assembly names to exclude from auto-registration.  Custom providers can be specified 
            to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationOptions.ImplementationProvider">
            <summary>
            Provides the services and concrete implementations to auto-register.  Custom providers
            can be specified to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationOptions.LifestyleResolver">
            <summary>
            Resolves the lifestyle of types for auto-registration.  By default, all types will be transient unless 
            they have an ImmutableObjectAttribute that specifies that the type is immutable.  Custom resolvers can be specified
            to replace or extend this one.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationOptions.DependencyRegistrationProviders">
            <summary>
            Providers for discovering and registering dependencies of each type.  This collection can be replaced or extended with
            custom providers.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.AutoRegistrationOptions.RegisterDecorators">
            <summary>
            Gets or sets if decorators should be discovered and automatically registered.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.ContextualFuncCreationHelper">
            <summary>
            A simple helper that can exposes a Func that creates instances
            based on the contextual container.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.ContextualFuncCreationHelper.#ctor(SimpleInjector.Container)">
            <summary>
            Constructor.  Takes the container to keep it in context for the
            GetFunc method.
            </summary>
            <param name="container">SimpleInjector Container instance.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.ContextualFuncCreationHelper.GetFunc``1">
            <summary>
            Publicly exposed Func method that will use the contextual SimpleInjector
            Container instance to create instances of the specified type.
            </summary>
            <typeparam name="T">Type of object to create</typeparam>
            <returns>A new instance of T, as defined by the registration rules
            of the SimpleInjector container.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.LazyDependencyRegistrationProvider">
            <summary>
            Provides discovery and registration of the Lazy dependencies to auto-registration enabled
            types.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.Contract.IDependencyRegistrationProvider">
            <summary>
            Provides discovery and registration of dependencies of auto-registration enabled
            types.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IDependencyRegistrationProvider.RegisterDependencies(System.Type,SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Discovers specific dependencies of the specified type and attempts to register them.
            </summary>
            <param name="concreteType">Concrete type for which the dependencies should be discovered
            and registered</param>
            <param name="container">SimpleInjector container in which the dependencies should be registered.</param>
            <param name="options">Options to apply to the discovery and registration process.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.LazyDependencyRegistrationProvider.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.LazyDependencyRegistrationProvider.RegisterDependencies(System.Type,SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Discovers any Lazy dependencies of the specified type and attempts to register them.
            </summary>
            <param name="concreteType">Concrete type for which the dependencies should be discovered
            and registered</param>
            <param name="container">SimpleInjector container in which the dependencies should be registered.</param>
            <param name="options">Options to apply to the discovery and registration process.</param>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.EnumerableDependencyRegistrationProvider">
            <summary>
            Provides discovery and registration of the IEnumerable dependencies to auto-registration enabled
            types.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.EnumerableDependencyRegistrationProvider.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.EnumerableDependencyRegistrationProvider.RegisterDependencies(System.Type,SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Discovers any IEnumerable dependencies of the specified type and attempts to register them.
            </summary>
            <param name="concreteType">Concrete type for which the dependencies should be discovered
            and registered</param>
            <param name="container">SimpleInjector container in which the dependencies should be registered.</param>
            <param name="options">Options to apply to the discovery and registration process.</param>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.FuncDependencyRegistrationProvider">
            <summary>
            Provides discovery and registration of the Func dependencies to auto-registration enabled
            types.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.FuncDependencyRegistrationProvider.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.DependencyRegistrationProvider.FuncDependencyRegistrationProvider.RegisterDependencies(System.Type,SimpleInjector.Container,SimpleInjector.AutoRegistration.Contract.IAutoRegistrationOptions)">
            <summary>
            Discovers any Func dependencies of the specified type and attempts to register them.
            </summary>
            <param name="concreteType">Concrete type for which the dependencies should be discovered
            and registered</param>
            <param name="container">SimpleInjector container in which the dependencies should be registered.</param>
            <param name="options">Options to apply to the discovery and registration process.</param>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.Contract.ILifestyleResolver">
            <summary>
            Determines the lifestyle of types.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.ILifestyleResolver.GetLifestyle(System.Type)">
            <summary>
            Determines the lifestyle of the specified type.
            </summary>
            <param name="type">Type for which the lifestyle should be determined.</param>
            <returns>The lifestyle of the specified type.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider">
            <summary>
            Discovers the appropriate concrete implementations and services to be auto-registered.
            </summary>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.Contract.IImplementationProvider">
            <summary>
            Discovers the appropriate concrete implementations and services to be auto-registered.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IImplementationProvider.GetAllConcreteTypes">
            <summary>
            Gets all concrete types that have auto-registration enabled.
            </summary>
            <returns>All concrete types that have auto-registration enabled.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IImplementationProvider.GetConcreteImplementionsOf(System.Type)">
            <summary>
            Gets the concrete implementations of the specified service type.
            </summary>
            <param name="serviceType">Service type to find concrete implementations of.</param>
            <returns>The concrete implementations of the specified service type.</returns>        
        </member>
        <member name="M:SimpleInjector.AutoRegistration.Contract.IImplementationProvider.GetNonRuntimeGenericInterface(System.Type)">
            <summary>
            Gets the design time generic interface equivalent of the specified run-time generic
            interface.
            </summary>
            <param name="genericServiceType">Run-time generic interface.</param>
            <returns>The design time generic interface equivalent of the specified run-time generic
            interface.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider.#ctor(SimpleInjector.AutoRegistration.Contract.IAutoRegistrationEnabledProvider)">
            <summary>
            Constructor
            </summary>
            <param name="enabledProvider">A provider that determines which types allow for auto-registration.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider.GetConcreteImplementionsOf(System.Type)">
            <summary>
            Gets the concrete implementations of the specified service type.
            </summary>
            <param name="serviceType">Service type to find concrete implementations of.</param>
            <returns>The concrete implementations of the specified service type.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider.GetAllConcreteTypes">
            <summary>
            Gets all concrete types that have auto-registration enabled.
            </summary>
            <returns>All concrete types that have auto-registration enabled.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider.GetNonRuntimeGenericInterface(System.Type)">
            <summary>
            Gets the design time generic interface equivalent of the specified run-time generic
            interface.
            </summary>
            <param name="genericServiceType">Run-time generic interface.</param>
            <returns>The design time generic interface equivalent of the specified run-time generic
            interface.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.ImplementationProvider.AutoRegistrationImplementationProvider.GetAssemblyExportedTypes(System.Reflection.Assembly)">
            <summary>
            Discovers and returns all auto-registration enabled types in the specified assembly.
            </summary>
            <param name="assembly">Assembly to search for auto-registration enabled types.</param>
            <returns>All auto-registration enabled types in the specified assembly.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolver">
            <summary>
            Determines the lifestyle of types based on associated attributes.
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolver.#ctor(SimpleInjector.AutoRegistration.Contract.IImplementationProvider,SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolverOptions)">
            <summary>
            Constructor.
            </summary>
            <param name="implementationProvider">The type implementation provider to use.</param>
            <param name="options">The options used to determine the lifestyle of types.</param>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolver.GetLifestyle(System.Type)">
            <summary>
            Determines the lifestyle of the specified type.
            </summary>
            <param name="type">Type for which the lifestyle should be determined.</param>
            <returns>The lifestyle of the specified type.</returns>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolver.GetLifestyleFromAttributes(System.Object[])">
            <summary>
            Determines the lifestyle based on the specified attributes
            </summary>
            <param name="attrs">Array of attributes associated with the type</param>
            <returns>A value indicating the lifestyle indicated by the specified attributes.</returns>
        </member>
        <member name="T:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolverOptions">
            <summary>
            Options used to resolve lifestyle based on type attributes
            </summary>
        </member>
        <member name="M:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolverOptions.#ctor">
            <summary>
            Constructor.  Creates a new AttributeLifestyleResolverOptions instance.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolverOptions.ThrowIfLifestyleNotDefined">
            <summary>
            Gets or sets a value indicating if an exception should be thrown in the lifestyle 
            cannot be explicitly determined for a type.
            </summary>
        </member>
        <member name="P:SimpleInjector.AutoRegistration.LifestyleResolver.AttributeLifestyleResolverOptions.DefaultLifestyle">
            <summary>
            Gets or sets the default lifestyle to use when the lifestyle cannot be explicitly
            determined for the type.
            </summary>
        </member>
    </members>
</doc>
